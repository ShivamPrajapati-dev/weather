{"version":3,"sources":["pages/about.js","pages/home.js","pages/404.js","App.js","serviceWorker.js","index.js"],"names":["About","style","marginTop","React","Component","Home","props","onSubmit","event","preventDefault","state","location","setState","loading","fetch","method","headers","body","JSON","stringify","address","then","res","json","data","console","log","weather","catch","err","Form","this","Input","label","placeholder","onChange","target","value","Button","onClick","primary","className","place","summary","temp","Error","centered","App","activeItem","handleItemClick","e","name","Menu","pointing","secondary","to","Item","active","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAgBeA,E,iLAZX,OACE,yBAAKC,MAAO,CACRC,UAAU,SAEd,oF,GANcC,IAAMC,W,2BCgEXC,E,YA3DX,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAaRC,SAAW,SAACC,GACVA,EAAMC,iBAED,EAAKC,MAAMC,WACd,EAAKC,SAAS,CAACC,SAAQ,IACvBC,MAAM,gCAAiC,CACjCC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACC,QAAQ,EAAKV,MAAMC,aACxCU,MAAK,SAACC,GAAD,OAAOA,EAAIC,UAAQF,MAAK,SAACG,GAC/BC,QAAQC,IAAIF,GACZ,EAAKZ,SAAS,CAACe,QAAQH,EAAKX,SAAQ,OACnCe,OAAM,SAAAC,GACP,EAAKjB,SAAS,CAACC,SAAQ,SA5B/B,EAAKH,MAAQ,CACXiB,QAAQ,GACRhB,SAAS,GACTE,SAAQ,GALM,E,iFAWhBC,MAAM,M,+BAyBA,IAAD,OACP,OACE,yBAAKb,MAAO,CACRC,UAAU,SAEZ,kBAAC4B,EAAA,EAAD,CAAMjB,QAASkB,KAAKrB,MAAMG,SACxB,kBAACiB,EAAA,EAAKE,MAAN,CAAYC,MAAM,WAAWC,YAAY,oCAAoCC,SAAU,SAAC3B,GACpF,EAAKI,SAAS,CAACD,SAASH,EAAM4B,OAAOC,WAEzC,kBAACC,EAAA,EAAD,CAAQC,QAASR,KAAKxB,SAAUiC,SAAO,GAAvC,WAEF,yBAAKC,UAAU,KACf,4BACGV,KAAKrB,MAAMiB,QAAQe,OAEtB,4BAAKX,KAAKrB,MAAMiB,QAAQgB,SACxB,4BAAKZ,KAAKrB,MAAMiB,QAAQiB,Y,GAvDbzC,IAAMC,WCQVyC,E,iLARX,OACE,wBAAIC,UAAQ,GAAZ,W,GAHc3C,IAAMC,W,kCCmDX2C,E,2MA1CbrC,MAAQ,CAAEsC,WAAY,Q,EAEvBC,gBAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiB,EAAKvC,SAAS,CAAEoC,WAAYG,K,wEAErD,IACCH,EAAejB,KAAKrB,MAApBsC,WAEV,OACE,yBAAKP,UAAU,SACb,kBAAC,IAAD,KACE,6BACI,6BACE,kBAACW,EAAA,EAAD,CAAMC,UAAQ,EAACC,WAAS,GACtB,kBAAC,IAAD,CAAMC,GAAG,KACD,kBAACH,EAAA,EAAKI,KAAN,CACEL,KAAK,OACLM,OAAuB,SAAfT,EACRT,QAASR,KAAKkB,mBAGtB,kBAAC,IAAD,CAAMM,GAAG,gBACH,kBAACH,EAAA,EAAKI,KAAN,CACEL,KAAK,QACLM,OAAuB,UAAfT,EACRT,QAASR,KAAKkB,qBAKhC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,KAAK,eAAeC,OAAO,GAAM,kBAAC,EAAD,OACxC,kBAAC,IAAD,CAAOD,KAAK,IAAIC,OAAO,GAAM,kBAAC,EAAD,OAC7B,kBAAC,IAAD,CAAOD,KAAK,IAAIC,OAAO,EAAMC,UAAWf,OAK5C,wBAAIJ,UAAU,QAAd,oC,GAtCYtC,IAAMC,WCEJyD,QACW,cAA7BC,OAAOnD,SAASoD,UAEe,UAA7BD,OAAOnD,SAASoD,UAEhBD,OAAOnD,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.526a3d69.chunk.js","sourcesContent":["import React from 'react';\n\nclass About extends React.Component{\n  render() {\n    return (\n      <div style={{\n          marginTop:'50px'\n        }}>\n      <h1>\n        Hello, This app was created by Shivam Prajapati\n      </h1>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React from 'react';\nimport axios from 'axios';\nimport { Button, Form } from 'semantic-ui-react'\n\nclass Home extends React.Component{\n\n\n    constructor(props){\n      super(props);\n      this.state = {\n        weather:{},\n        location:'',\n        loading:false\n      }\n    }\n\n    componentDidMount()\n    {\n      fetch('')\n    }\n\n    onSubmit=  (event)=>{\n      event.preventDefault();\n\n      if(!!this.state.location){\n        this.setState({loading:true})\n        fetch('http://localhost:5000/weather', {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({address:this.state.location}),\n            }).then((res)=>res.json()).then((data)=>{\n              console.log(data)\n              this.setState({weather:data,loading:false});\n            }).catch(err=>{\n              this.setState({loading:false});\n            })\n        }\n\n    }\n\n  render() {\n    return (\n      <div style={{\n          marginTop:'50px'\n        }}>\n        <Form loading={this.state.loading}>\n          <Form.Input label='Location' placeholder='Enter location you want to search' onChange={(event)=>{\n              this.setState({location:event.target.value})\n            }} />\n          <Button onClick={this.onSubmit} primary>Submit</Button>\n        </Form>\n        <div className=\"s\">\n        <h4>\n          {this.state.weather.place}\n        </h4>\n        <h4>{this.state.weather.summary}</h4>\n        <h5>{this.state.weather.temp}</h5>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\n\nclass Error extends React.Component{\n  render() {\n    return (\n      <h1 centered>\n        404\n      </h1>\n    );\n  }\n}\n\nexport default Error;\n","import React from 'react';\nimport About from './pages/about';\nimport Home from './pages/home';\nimport Error from './pages/404';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport './App.css';\nimport { Menu } from 'semantic-ui-react'\n\n\n\nclass App extends React.Component{\n  state = { activeItem: 'home' }\n\n handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n  render(){\n    const { activeItem } = this.state\n\n  return (\n    <div className='title'>\n      <Router>\n        <div>\n            <div>\n              <Menu pointing secondary>\n                <Link to=\"/\">\n                        <Menu.Item\n                          name='home'\n                          active={activeItem === 'home'}\n                          onClick={this.handleItemClick}\n                        />\n                  </Link>\n                  <Link to=\"/pages/about\">\n                        <Menu.Item\n                          name='about'\n                          active={activeItem === 'about'}\n                          onClick={this.handleItemClick}\n                        />\n                  </Link>\n                </Menu>\n            </div>\n        <Switch>\n          <Route path=\"/pages/about\" exact={true}><About /></Route>\n          <Route path=\"/\" exact={true}><Home /></Route>\n          <Route path=\"*\" exact={true} component={Error}/>\n        </Switch>\n        </div>\n      </Router>\n\n      <h6 className=\"foot\">Created by Shivam Prajapati</h6>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}